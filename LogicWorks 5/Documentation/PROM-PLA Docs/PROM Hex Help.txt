Raw PROM/RAM Hex Format Help

This data format allows you to specify the contents of a PROM or RAM device using hexadecimal characters in a non-structured format.  The following points summarize this file format:

- Each string of hexadecimal characters (0-9, a-f, A-F) specifies one word in the array, starting with address 0, then address 1, etc.
- The character "X" or "x" can be used to specify Don't Know (X) values for the 4 bits represented by that character. 
- Any non-hexadecimal character (including blanks, non-hex letters, punctuation and line breaks) separates one word from the next.
- Each hex character represents 4 bits, with the rightmost character representing the least significant bits in the word (i.e. bits 3, 2, 1, and 0).
- If insufficient hex characters are given for the length of the word, the rightmost character in the group represents the least significant bits and unspecified higher order bits are filled with zeros.
- If all the words in the device are not specified, unspecified words are filled with Don't Know (X).
- C-language-style comments can be used in the file, i.e. "//" causes the remainder of the line to be skipped, and arbitrary comments can be enclosed in "/*" and "*/"

EXAMPLES:

The following text will fill a 4-input, 4-output PROM with a Gray-code count:

0 1 3 2 6 4 5 7
f e c d 9 b a 8

The following text will fill the first 32 words of a 32-output device with a bit pattern and leave any remaining locations in the Don't Know state:

1 2 4 GROG 8 10 20 40 80 100 200 400 800 1000 2000 4000 8000
10000 20000 40000 80000 100000 200000 400000 800000
1000000 2000000 4000000 8000000
10000000, 20000000, 40000000, 80000000


SUMMARY - POINTS TO NOTE:

- Line breaks can be inserted wherever desired except in the middle of a word
- Items not containing any hex characters (like "GROG" in the above example) will be completely ignored and just taken as separators.
- No error messages are given no matter what you put in the text!
